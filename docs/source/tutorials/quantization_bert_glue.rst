
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/quantization_bert_glue.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_quantization_bert_glue.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_quantization_bert_glue.py:


Quantize BERT on Task GLUE
==========================

Here we show an effective transformer simulated quantization process that NNI team has tried, and users can use NNI to discover better process

we use the BERT model and the trainer pipeline in the Transformers to do some experiments.
The entire quantization process can be divided into the following steps:

1. Use the BERT-base-uncased model and the trainer pipeline in the transformers to fine-tune the model on the downstream task GLUE.
   From our experience, the final performance of quantization on the finetuned model is
   better than quantization directly on the pre-trained model.
2. Use a specific quantizer to quantize the finetuned model on the GLUE.
   Here we apply QAT, LSQ and PTQ quantizers to quantize the BERT model so that 
   we can compare their performance of the quantized BERT on the GLUE.
   Among them, LSQ and QAT are quantization aware training methods, and PTQ is a post-training quantization method.

During the process of quantizing BERT:

* we use the BERT model and the trainer pipeline in the Transformers to do some experiments.
* we use int8 to quantize Linear layers in the BERT.encoder.

Experiment
----------

Preparation
^^^^^^^^^^^

This section is mainly for fine-tuning model on the downstream task GLUE.
If you are familiar with how to finetune BERT on GLUE dataset, you can skip this section.

1. Load the tokenizer and BERT model from Huggingface transformers.
2. Create a trainer instance to fine-tune the BERT model.

.. note::

    Please set ``dev_mode`` to ``False`` to run this tutorial. Here ``dev_mode`` is ``True`` by default is for generating documents.

.. GENERATED FROM PYTHON SOURCE LINES 40-71

.. code-block:: default


    from pathlib import Path
    import argparse

    import numpy as np

    import torch
    from torch.utils.data import ConcatDataset

    import nni

    from datasets import load_dataset, load_metric
    from transformers import BertTokenizerFast, DataCollatorWithPadding, BertForSequenceClassification, EvalPrediction
    from transformers.trainer import Trainer
    from transformers.training_args import TrainingArguments


    task_name = 'rte'
    finetune_lr = 4e-5
    quant_lr = 1e-5
    quant_method = 'lsq'
    dev_mode = True

    if dev_mode:
        quant_max_epochs = 1
        finetune_max_epochs = 1
    else:
        quant_max_epochs = 10
        finetune_max_epochs = 10









.. GENERATED FROM PYTHON SOURCE LINES 72-73

Load the pre-trained model from the transformers

.. GENERATED FROM PYTHON SOURCE LINES 73-80

.. code-block:: default


    def build_model(pretrained_model_name_or_path: str, task_name: str):
        is_regression = task_name == 'stsb'
        num_labels = 1 if is_regression else (3 if task_name == 'mnli' else 2)
        model = BertForSequenceClassification.from_pretrained(pretrained_model_name_or_path, num_labels=num_labels)
        return model








.. GENERATED FROM PYTHON SOURCE LINES 81-82

Create datasets on the specific task GLUE

.. GENERATED FROM PYTHON SOURCE LINES 82-131

.. code-block:: default


    def prepare_datasets(task_name: str, tokenizer: BertTokenizerFast, cache_dir: str):
        task_to_keys = {
            'cola': ('sentence', None),
            'mnli': ('premise', 'hypothesis'),
            'mrpc': ('sentence1', 'sentence2'),
            'qnli': ('question', 'sentence'),
            'qqp': ('question1', 'question2'),
            'rte': ('sentence1', 'sentence2'),
            'sst2': ('sentence', None),
            'stsb': ('sentence1', 'sentence2'),
            'wnli': ('sentence1', 'sentence2'),
        }
        sentence1_key, sentence2_key = task_to_keys[task_name]

        # used to preprocess the raw data
        def preprocess_function(examples):
            # Tokenize the texts
            args = (
                (examples[sentence1_key],) if sentence2_key is None else (examples[sentence1_key], examples[sentence2_key])
            )
            result = tokenizer(*args, padding=False, max_length=128, truncation=True)

            if 'label' in examples:
                # In all cases, rename the column to labels because the model will expect that.
                result['labels'] = examples['label']
            return result

        raw_datasets = load_dataset('glue', task_name, cache_dir=cache_dir)
        for key in list(raw_datasets.keys()):
            if 'test' in key:
                raw_datasets.pop(key)

        processed_datasets = raw_datasets.map(preprocess_function, batched=True,
                                              remove_columns=raw_datasets['train'].column_names)

        train_dataset = processed_datasets['train']
        if task_name == 'mnli':
            validation_datasets = {
                'validation_matched': processed_datasets['validation_matched'],
                'validation_mismatched': processed_datasets['validation_mismatched']
            }
        else:
            validation_datasets = {
                'validation': processed_datasets['validation']
            }

        return train_dataset, validation_datasets








.. GENERATED FROM PYTHON SOURCE LINES 132-133

Create a trainer instance

.. GENERATED FROM PYTHON SOURCE LINES 133-191

.. code-block:: default


    # .. note::

    #     Please set ``is_trace`` to ``False`` to fine-tune the BERT model and set ``is_trace`` to ``True``
    #     When you need to create a traced trainer for model quantization.

    def prepare_traced_trainer(model, load_best_model_at_end=False, is_trace=False):
        is_regression = task_name == 'stsb'
        metric = load_metric('glue', task_name)

        def compute_metrics(p: EvalPrediction):
            preds = p.predictions[0] if isinstance(p.predictions, tuple) else p.predictions
            preds = np.squeeze(preds) if is_regression else np.argmax(preds, axis=1)
            result = metric.compute(predictions=preds, references=p.label_ids)
            result['default'] = result.get('f1', result.get('accuracy', 0.))
            return result

        tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')
        train_dataset, validation_datasets = prepare_datasets(task_name, tokenizer, '')
        merged_validation_dataset = ConcatDataset([d for d in validation_datasets.values()]) # type: ignore
        data_collator = DataCollatorWithPadding(tokenizer)
        training_args = TrainingArguments(output_dir='./output/trainer',
                                          do_train=True,
                                          do_eval=True,
                                          evaluation_strategy='steps',
                                          per_device_train_batch_size=128, #128,
                                          per_device_eval_batch_size=128, #128,
                                          num_train_epochs=finetune_max_epochs,
                                          dataloader_num_workers=12,
                                          save_strategy='steps',
                                          save_total_limit=1,
                                          metric_for_best_model='default',
                                          greater_is_better=True,
                                          seed=1024,
                                          load_best_model_at_end=load_best_model_at_end,)
        if is_trace:
            training_args.learning_rate = quant_lr
            trainer = nni.trace(Trainer)(model=model,
                                        args=training_args,
                                        data_collator=data_collator,
                                        train_dataset=train_dataset,
                                        eval_dataset=merged_validation_dataset,
                                        tokenizer=tokenizer,
                                        compute_metrics=compute_metrics,
                                        )
        else:
            training_args.learning_rate = finetune_lr
            trainer = Trainer(model=model,
                             args=training_args,
                             data_collator=data_collator,
                             train_dataset=train_dataset,
                             eval_dataset=merged_validation_dataset,
                             tokenizer=tokenizer,
                             compute_metrics=compute_metrics,
                             )

        return trainer








.. GENERATED FROM PYTHON SOURCE LINES 192-193

Create the finetuned model

.. GENERATED FROM PYTHON SOURCE LINES 193-204

.. code-block:: default


    def build_finetuning_model(state_dict_path: str, is_trace=False):
        model = build_model('bert-base-uncased', task_name)
        if Path(state_dict_path).exists():
            model.load_state_dict(torch.load(state_dict_path))
        else:
            trainer = prepare_traced_trainer(model, True, is_trace)
            trainer.train()
            torch.save(model.state_dict(), state_dict_path)
        return model








.. GENERATED FROM PYTHON SOURCE LINES 205-218

Quantization
^^^^^^^^^^^^
After fine-tuning the BERT model on the specific task GLUE, a specific quantizer instsance can be created
to process quantization aware training or post-training quantization with BERT on the GLUE.

The entire quantization process can be devided into the following steps:

1. Call ``build_finetuning_model`` to load or fine-tune the BERT model on a specific task GLUE
2. Call ``prepare_traced_trainer`` and set ``is_trace`` to ``True`` to create a traced trainer instance for model quantization
3. Call the TransformersEvaluator to create an evaluator instance
4. Use the defined config_list and evaluator to create a quantizer instance
5. Define ``max_steps`` or ``max_epochs``. Note that ``max_steps`` and ``max_epochs`` cannot be None at the same time.
6. Call ``quantizer.compress(max_steps, max_epochs)`` to execute the simulated quantization process

.. GENERATED FROM PYTHON SOURCE LINES 218-266

.. code-block:: default


    import nni
    from nni.contrib.compression.quantization import QATQuantizer, LsqQuantizer, PtqQuantizer
    from nni.contrib.compression.utils import TransformersEvaluator

    def fake_quantize():
        config_list = [{
            'op_types': ['Linear'],
            'op_names_re': ['bert.encoder.layer.{}'.format(i) for i in range(12)],
            'target_names': ['weight', '_output_'],
            'quant_dtype': 'int8',
            'quant_scheme': 'affine',
            'granularity': 'default',
        }]

        # create a finetune model
        Path('./output/bert_finetuned/').mkdir(parents=True, exist_ok=True)
        model: torch.nn.Module = build_finetuning_model(f'./output/bert_finetuned/{task_name}.bin', is_trace=False) # type: ignore
        traced_trainer = prepare_traced_trainer(model, is_trace=True)
        evaluator = TransformersEvaluator(traced_trainer)
        if quant_method == 'lsq':
            quantizer = LsqQuantizer(model, config_list, evaluator)
            model, calibration_config = quantizer.compress(max_steps=None, max_epochs=quant_max_epochs)
        elif quant_method == 'qat':
            quantizer = QATQuantizer(model, config_list, evaluator, 1000)
            model, calibration_config = quantizer.compress(max_steps=None, max_epochs=quant_max_epochs)
        elif quant_method == 'ptq':
            quantizer = PtqQuantizer(model, config_list, evaluator)
            model, calibration_config = quantizer.compress(max_steps=1, max_epochs=None)
        else:
            raise ValueError(f"quantization method {quant_method} is not supported")
        print(calibration_config)
        # evaluate the performance of the fake quantize model
        quantizer.evaluator.bind_model(model, quantizer._get_param_names_map())
        print(quantizer.evaluator.evaluate())

    def evaluate():
        model = build_finetuning_model(f'./output/bert_finetuned/{task_name}.bin', is_trace=False)
        trainer = prepare_traced_trainer(model, is_trace=False)
        metrics = trainer.evaluate()
        print(f"Evaluate metrics={metrics}")


    if __name__ == "__main__":
        fake_quantize()
        evaluate()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForSequenceClassification: ['cls.seq_relationship.bias', 'cls.predictions.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.decoder.weight', 'cls.predictions.transform.LayerNorm.weight']
    - This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
    - This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
    Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']
    You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
    /home/xinzhang3/bug_fix/nni/examples/tutorials/quantization_bert_glue.py:141: FutureWarning: load_metric is deprecated and will be removed in the next major version of datasets. Use 'evaluate.load' instead, from the new library 🤗 Evaluate: https://huggingface.co/docs/evaluate
      metric = load_metric('glue', task_name)
    Found cached dataset glue (/home/xinzhang3/.cache/huggingface/datasets/glue/rte/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad)
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 1189.20it/s]
    Loading cached processed dataset at /home/xinzhang3/.cache/huggingface/datasets/glue/rte/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad/cache-e5de121dc04ebc15.arrow
    Loading cached processed dataset at /home/xinzhang3/.cache/huggingface/datasets/glue/rte/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad/cache-7d912fed26ab6913.arrow
    trainer.optimzer is not wrapped by nni.trace, or trainer.optimzer is None, will using huggingface default optimizer.
    /anaconda/envs/bony/lib/python3.9/site-packages/transformers/optimization.py:391: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
      warnings.warn(
    trainer.lr_scheduler is not wrapped by nni.trace, or trainer.lr_scheduler is None, will using huggingface default lr_scheduler.
      0%|          | 0/20 [00:00<?, ?it/s]      5%|5         | 1/20 [00:01<00:35,  1.86s/it]     10%|#         | 2/20 [00:02<00:21,  1.19s/it]     15%|#5        | 3/20 [00:03<00:16,  1.02it/s]     20%|##        | 4/20 [00:04<00:14,  1.13it/s]     25%|##5       | 5/20 [00:04<00:12,  1.21it/s]     30%|###       | 6/20 [00:05<00:11,  1.26it/s]     35%|###5      | 7/20 [00:06<00:10,  1.30it/s]     40%|####      | 8/20 [00:06<00:09,  1.32it/s]     45%|####5     | 9/20 [00:07<00:08,  1.34it/s]     50%|#####     | 10/20 [00:08<00:07,  1.35it/s]     55%|#####5    | 11/20 [00:09<00:06,  1.35it/s]     60%|######    | 12/20 [00:09<00:05,  1.36it/s]     65%|######5   | 13/20 [00:10<00:05,  1.36it/s]     70%|#######   | 14/20 [00:11<00:04,  1.37it/s]     75%|#######5  | 15/20 [00:12<00:03,  1.37it/s]     80%|########  | 16/20 [00:12<00:02,  1.37it/s]     85%|########5 | 17/20 [00:13<00:02,  1.37it/s]     90%|######### | 18/20 [00:14<00:01,  1.37it/s]     95%|#########5| 19/20 [00:14<00:00,  1.37it/s]    100%|##########| 20/20 [00:15<00:00,  1.62it/s]                                                   {'train_runtime': 15.3966, 'train_samples_per_second': 161.724, 'train_steps_per_second': 1.299, 'train_loss': 0.14304122924804688, 'epoch': 1.0}
    100%|##########| 20/20 [00:15<00:00,  1.62it/s]    100%|##########| 20/20 [00:15<00:00,  1.30it/s]
    defaultdict(<class 'dict'>, {'bert.encoder.layer.9.attention.self.key': {'weight': {'scale': tensor(0.0065, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.8201, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.8201, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1672, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(21.2337, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-21.2337, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.3.attention.output.dense': {'weight': {'scale': tensor(0.0040, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5114, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5114, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0325, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(4.1311, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-4.1311, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.10.intermediate.dense': {'weight': {'scale': tensor(0.0055, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6987, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6987, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1719, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(21.8278, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-21.8278, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.7.attention.self.value': {'weight': {'scale': tensor(0.0046, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5876, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5876, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0868, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(11.0211, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-11.0211, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.3.output.dense': {'weight': {'scale': tensor(0.0053, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6767, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6767, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0533, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(6.7704, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-6.7704, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.6.output.dense': {'weight': {'scale': tensor(0.0053, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6782, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6782, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0442, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(5.6114, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-5.6114, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.1.attention.self.key': {'weight': {'scale': tensor(0.0059, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7519, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7519, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1598, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(20.3002, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-20.3002, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.11.attention.self.query': {'weight': {'scale': tensor(0.0064, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.8106, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.8106, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1632, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(20.7316, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-20.7316, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.11.intermediate.dense': {'weight': {'scale': tensor(0.0056, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7053, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7053, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.2481, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(31.5073, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-31.5073, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.8.attention.output.dense': {'weight': {'scale': tensor(0.0047, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5932, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5932, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0382, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(4.8512, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-4.8512, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.8.attention.self.value': {'weight': {'scale': tensor(0.0049, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6270, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6270, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0993, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(12.6120, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-12.6120, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.5.attention.self.value': {'weight': {'scale': tensor(0.0048, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6154, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6154, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0929, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(11.7960, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-11.7960, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.4.attention.self.query': {'weight': {'scale': tensor(0.0059, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7472, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7472, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1588, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(20.1661, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-20.1661, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.2.attention.self.query': {'weight': {'scale': tensor(0.0065, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.8264, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.8264, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1649, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(20.9475, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-20.9475, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.4.attention.output.dense': {'weight': {'scale': tensor(0.0044, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5623, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5623, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0429, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(5.4538, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-5.4538, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.11.attention.output.dense': {'weight': {'scale': tensor(0.0052, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6631, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6631, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0713, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(9.0508, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-9.0508, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.11.output.dense': {'weight': {'scale': tensor(0.0050, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6367, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6367, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0496, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(6.3015, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-6.3015, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.9.intermediate.dense': {'weight': {'scale': tensor(0.0056, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7060, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7060, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.2949, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(37.4571, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-37.4571, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.6.attention.self.key': {'weight': {'scale': tensor(0.0060, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7672, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7672, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1781, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(22.6188, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-22.6188, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.2.attention.output.dense': {'weight': {'scale': tensor(0.0038, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.4779, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.4779, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0297, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(3.7772, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-3.7772, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.1.attention.self.query': {'weight': {'scale': tensor(0.0060, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7593, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7593, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1526, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(19.3829, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-19.3829, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.3.intermediate.dense': {'weight': {'scale': tensor(0.0056, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7114, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7114, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.3458, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(43.9221, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-43.9221, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.2.intermediate.dense': {'weight': {'scale': tensor(0.0055, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6996, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6996, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.3636, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(46.1826, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-46.1826, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.11.attention.self.key': {'weight': {'scale': tensor(0.0063, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.8029, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.8029, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1600, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(20.3232, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-20.3232, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.11.attention.self.value': {'weight': {'scale': tensor(0.0055, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6992, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6992, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1114, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(14.1486, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-14.1486, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.9.attention.self.value': {'weight': {'scale': tensor(0.0048, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6157, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6157, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0961, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(12.2001, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-12.2001, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.10.output.dense': {'weight': {'scale': tensor(0.0053, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6677, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6677, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0840, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(10.6654, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-10.6654, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.4.attention.self.value': {'weight': {'scale': tensor(0.0049, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6257, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6257, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0959, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(12.1743, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-12.1743, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.1.intermediate.dense': {'weight': {'scale': tensor(0.0055, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7013, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7013, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.3433, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(43.6011, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-43.6011, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.9.attention.self.query': {'weight': {'scale': tensor(0.0065, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.8252, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.8252, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1736, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(22.0501, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-22.0501, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.7.intermediate.dense': {'weight': {'scale': tensor(0.0055, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6938, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6938, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.2959, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(37.5798, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-37.5798, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.8.attention.self.query': {'weight': {'scale': tensor(0.0062, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7887, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7887, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1731, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(21.9862, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-21.9862, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.10.attention.self.query': {'weight': {'scale': tensor(0.0065, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.8255, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.8255, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1737, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(22.0616, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-22.0616, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.0.output.dense': {'weight': {'scale': tensor(0.0050, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6394, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6394, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1251, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(15.8873, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-15.8873, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.2.attention.self.value': {'weight': {'scale': tensor(0.0039, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.4971, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.4971, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0795, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(10.0994, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-10.0994, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.3.attention.self.value': {'weight': {'scale': tensor(0.0043, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5470, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5470, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0847, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(10.7551, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-10.7551, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.0.attention.self.key': {'weight': {'scale': tensor(0.0058, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7389, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7389, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1455, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(18.4843, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-18.4843, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.8.attention.self.key': {'weight': {'scale': tensor(0.0063, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7949, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7949, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1714, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(21.7690, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-21.7690, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.7.attention.output.dense': {'weight': {'scale': tensor(0.0044, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5542, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5542, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0374, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(4.7454, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-4.7454, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.4.output.dense': {'weight': {'scale': tensor(0.0054, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6907, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6907, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0493, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(6.2557, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-6.2557, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.0.intermediate.dense': {'weight': {'scale': tensor(0.0052, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6641, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6641, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.4180, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(53.0877, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-53.0877, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.5.intermediate.dense': {'weight': {'scale': tensor(0.0056, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7165, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7165, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.3056, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(38.8111, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-38.8111, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.2.attention.self.key': {'weight': {'scale': tensor(0.0063, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.8043, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.8043, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1603, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(20.3629, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-20.3629, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.1.attention.output.dense': {'weight': {'scale': tensor(0.0038, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.4853, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.4853, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0300, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(3.8128, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-3.8128, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.10.attention.self.value': {'weight': {'scale': tensor(0.0049, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6216, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6216, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0956, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(12.1399, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-12.1399, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.5.output.dense': {'weight': {'scale': tensor(0.0054, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6860, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6860, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0491, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(6.2335, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-6.2335, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.7.output.dense': {'weight': {'scale': tensor(0.0052, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6591, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6591, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0450, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(5.7141, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-5.7141, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.6.attention.self.query': {'weight': {'scale': tensor(0.0060, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7680, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7680, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1752, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(22.2449, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-22.2449, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.1.attention.self.value': {'weight': {'scale': tensor(0.0040, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5044, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5044, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0817, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(10.3782, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-10.3782, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.6.attention.output.dense': {'weight': {'scale': tensor(0.0045, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5675, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5675, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0429, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(5.4493, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-5.4493, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.2.output.dense': {'weight': {'scale': tensor(0.0053, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6705, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6705, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0503, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(6.3880, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-6.3880, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.8.intermediate.dense': {'weight': {'scale': tensor(0.0055, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7005, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7005, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.2993, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(38.0069, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-38.0069, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.9.output.dense': {'weight': {'scale': tensor(0.0054, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6856, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6856, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0456, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(5.7914, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-5.7914, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.5.attention.self.query': {'weight': {'scale': tensor(0.0061, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7772, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7772, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1772, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(22.5049, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-22.5049, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.6.intermediate.dense': {'weight': {'scale': tensor(0.0057, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7233, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7233, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.3178, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(40.3655, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-40.3655, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.7.attention.self.key': {'weight': {'scale': tensor(0.0061, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7729, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7729, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1806, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(22.9391, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-22.9391, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.4.attention.self.key': {'weight': {'scale': tensor(0.0058, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7405, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7405, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1553, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(19.7197, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-19.7197, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.0.attention.output.dense': {'weight': {'scale': tensor(0.0039, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.4954, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.4954, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0310, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(3.9366, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-3.9366, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.0.attention.self.query': {'weight': {'scale': tensor(0.0060, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7621, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7621, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1317, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(16.7307, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-16.7307, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.8.output.dense': {'weight': {'scale': tensor(0.0052, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6619, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6619, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0442, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(5.6177, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-5.6177, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.9.attention.output.dense': {'weight': {'scale': tensor(0.0046, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5820, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5820, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0366, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(4.6452, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-4.6452, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.1.output.dense': {'weight': {'scale': tensor(0.0053, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.6679, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.6679, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0631, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(8.0158, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-8.0158, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.7.attention.self.query': {'weight': {'scale': tensor(0.0061, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7774, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7774, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1767, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(22.4399, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-22.4399, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.10.attention.output.dense': {'weight': {'scale': tensor(0.0047, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5918, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5918, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0601, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(7.6361, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-7.6361, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.6.attention.self.value': {'weight': {'scale': tensor(0.0047, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5984, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5984, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0951, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(12.0813, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-12.0813, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.0.attention.self.value': {'weight': {'scale': tensor(0.0040, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5048, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5048, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0651, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(8.2731, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-8.2731, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.4.intermediate.dense': {'weight': {'scale': tensor(0.0057, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7184, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7184, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.3371, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(42.8139, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-42.8139, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.3.attention.self.query': {'weight': {'scale': tensor(0.0060, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7669, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7669, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1530, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(19.4367, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-19.4367, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.5.attention.output.dense': {'weight': {'scale': tensor(0.0046, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.5843, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.5843, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.0405, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(5.1493, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-5.1493, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.10.attention.self.key': {'weight': {'scale': tensor(0.0064, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.8165, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.8165, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1729, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(21.9583, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-21.9583, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.5.attention.self.key': {'weight': {'scale': tensor(0.0061, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7709, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7709, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1799, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(22.8469, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-22.8469, grad_fn=<ToCopyBackward0>)}}, 'bert.encoder.layer.3.attention.self.key': {'weight': {'scale': tensor(0.0060, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(0.7604, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-0.7604, grad_fn=<ToCopyBackward0>)}, '_output_0': {'scale': tensor(0.1540, grad_fn=<ToCopyBackward0>), 'zero_point': tensor(0.), 'quant_dtype': 'int8', 'quant_scheme': 'affine', 'quant_bits': 8, 'tracked_max': tensor(19.5544, grad_fn=<ToCopyBackward0>), 'tracked_min': tensor(-19.5544, grad_fn=<ToCopyBackward0>)}}})
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00,  8.39it/s]    100%|##########| 3/3 [00:00<00:00,  7.76it/s]
    Evaluation function returns a dict metric without key `default`,will return None as the model evaluation metric value.
    (None, {'eval_loss': 1.2578270435333252, 'eval_accuracy': 0.6462093862815884, 'eval_default': 0.6462093862815884, 'eval_runtime': 1.0012, 'eval_samples_per_second': 276.681, 'eval_steps_per_second': 2.997})
    Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForSequenceClassification: ['cls.seq_relationship.bias', 'cls.predictions.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.decoder.weight', 'cls.predictions.transform.LayerNorm.weight']
    - This IS expected if you are initializing BertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
    - This IS NOT expected if you are initializing BertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
    Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']
    You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
    Found cached dataset glue (/home/xinzhang3/.cache/huggingface/datasets/glue/rte/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad)
      0%|          | 0/3 [00:00<?, ?it/s]    100%|##########| 3/3 [00:00<00:00, 1406.07it/s]
    Loading cached processed dataset at /home/xinzhang3/.cache/huggingface/datasets/glue/rte/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad/cache-e5de121dc04ebc15.arrow
    Loading cached processed dataset at /home/xinzhang3/.cache/huggingface/datasets/glue/rte/1.0.0/dacbe3125aa31d7f70367a07a8a9e72a5a0bfeb5fc42e75c9db75b96da6053ad/cache-7d912fed26ab6913.arrow
      0%|          | 0/3 [00:00<?, ?it/s]     67%|######6   | 2/3 [00:00<00:00, 10.62it/s]    100%|##########| 3/3 [00:00<00:00,  9.28it/s]
    Evaluate metrics={'eval_loss': 1.3178999423980713, 'eval_accuracy': 0.6787003610108303, 'eval_default': 0.6787003610108303, 'eval_runtime': 0.895, 'eval_samples_per_second': 309.514, 'eval_steps_per_second': 3.352}




.. GENERATED FROM PYTHON SOURCE LINES 267-304

Result
------
We experimented with PTQ, LSQ, and QAT algorithms on the MNLI, QNLI, QQP, and RTE datasets respectively on an A100, and the experimental results are as follows

..list-table:: Quantize Bert-base-uncased on MNLI, QNLI, MRPC, QQP and RTE datasets.
    :header-rows: 1
    :widths: auto

    * - Quant Method
      - MNLI
      - QNLI
      - MRPC
      - QQP
      - RTE
    * - Baseline
      - 84.53
      - 91.71
      - 83.09
      - 91.2
      - 72.56
    * - LSQ
      - 84.13
      - 91.58
      - 83.58
      - 91.08
      - 70.76
    * - QAT
      - 83.18
      - 90.52
      - 84.07
      - 90.82
      - 74.01
    * - PTQ
      - 81.4
      - 89.37
      - 79.17
      - 90.74
      - 67.87


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  25.930 seconds)


.. _sphx_glr_download_tutorials_quantization_bert_glue.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: quantization_bert_glue.py <quantization_bert_glue.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: quantization_bert_glue.ipynb <quantization_bert_glue.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
